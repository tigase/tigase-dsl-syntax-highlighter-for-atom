'scopeName': 'source.tdsl'
'name': 'Tigase DSL'
'fileTypes': [
  'tdsl'
]
'patterns': [
  {
    include: '#value_pair'
  }
  {
    include: '#comment'
  }
  {
    include: '#bean'
  }
  {
    include: '#map'
  }
]
repository:
  # Comment grammar
  comment:
    match: '((#).*$\\n?)'
    captures:
      1:
        name: 'comment.line.number-sign.tdsl.properties'
      2:
        name: 'punctuation.definition.comment.tdsl.properties'
      3:
        name: 'comment.line.semi-colon.tdsl.properties'
      4:
        name: 'punctuation.definition.comment.tdsl.properties'
  'value_pair':
    name: 'meta.value-pair.section-item.tdsl.properties'
    begin: '(\'?[-\\w]+\'?)\\s*(=)\\s*(?!$)'
    captures:
      1:
        name: 'punctuation.definition.entity.tdsl.properties'
      2:
        name: 'keyword.operator.assignment.tdsl'
    end: '\\s'
    patterns: [
      {
        include: '#boolean'
      }
      {
        include: '#list'
      }
      {
        include: '#expression'
      }
      {
        include: '#env-function'
      }
      {
        include: '#prop-function'
      }
      {
        include: '#bean'
      }
      {
        include: '#map'
      }
      {
        include: '#escaped-string'
      }
      {
        include: '#string-quoted-double'
      }
      {
        include: '#string-quoted-single'
      }
      {
        include: '#numbers'
      }
      {
        include: '#comment'
      }
    ]
  bean:
    begin: '((\'.+\')|\\w+)\\s*(\\([^\\)]*\\))?\\s*(\\{)'
    beginCaptures:
      1:
        name: 'entity.name.function.tdsl'
      3:
        patterns: [
          {
            match: '(class|active|exportable):\\s*([^,\\)]+)'
            captures:
              1:
                name: 'keyword.control.tdsl'
              2:
                patterns: [
                  {
                    include: '#boolean'
                  }
                  {
                    match: '[\\w\\.]+'
                    name: 'meta.closure.parameter.tdsl'
                  }
                ]
          }
          # {
          #   include: '#boolean'
          # }
          # {
          #   include: '#escaped-string'
          # }
          # {
          #   include: '#string-quoted-double'
          # }
          # {
          #   include: '#string-quoted-single'
          # }
          # {
          #   include: '#numbers'
          # }
        ]
      4:
        name: 'punctuation.section.scope.begin.tdsl'
    end: '(\\})'
    endCaptures:
      1:
        name: 'punctuation.section.scope.end.tdsl'
    name: 'meta.function.method.definition.tdsl'
    patterns: [
      # {
      #   include: '#boolean'
      # }
      # {
      #   include: '#escaped-string'
      # }
      # {
      #   include: '#string-quoted-double'
      # }
      # {
      #   include: '#string-quoted-single'
      # }
      # {
      #   include: '#numbers'
      # }
      # {
      #   include: '#list'
      # }
      {
        include: '#value_pair'
      }
      {
        include: '#bean'
      }
      {
        include: '#map'
      }
      {
        include: '#comment'
      }
    ]
  map:
    begin: '\\{'
    end: '\\}'
    name: 'keyword.operator.assignment.tdsl'
    patterns: [
      # {
      #   include: '#boolean'
      # }
      # {
      #   include: '#escaped-string'
      # }
      # {
      #   include: '#string-quoted-double'
      # }
      # {
      #   include: '#string-quoted-single'
      # }
      # {
      #   include: '#numbers'
      # }
      # {
      #   include: '#list'
      # }
      {
        include: '#value_pair'
      }
      {
        include: '#bean'
      }
      {
        include: '#map'
      }
      {
        include: '#comment'
      }
    ]
  list:
    match: '\\[(.*)\\]'
    begin: '\\['
    end: '\\]'
    name: 'keyword.operator.assignment.tdsl'
    captures:
      1:
        patterns: [
          {
            include: "#listItem"
          }
        ]
  listItem:
    patterns: [
      {
        include: '#boolean'
      }
      {
        include: '#expression'
      }
      {
        include: '#env-function'
      }
      {
        include: '#prop-function'
      }
      {
        include: '#escaped-string'
      }
      {
        include: '#string-quoted-double'
      }
      {
        include: '#string-quoted-single'
      }
      {
        include: '#numbers'
      }
      {
        include: '#list'
      }
      {
        include: '#bean'
      }
      {
        include: '#map'
      }
      {
        include: '#comment'
      }
    ]
  # Boolean value
  boolean:
    match: '\\b(?i:yes|no|0|1|true|false)\\b'
    name: 'constant.language.boolean.tdsl.properties'
  'string-quoted-double':
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.tdsl'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.tdsl'
    'name': 'string.quoted.double.tdsl'
    'patterns': [
      {
        'include': '#string-quoted-double-contents'
      }
    ]
  'string-quoted-double-contents':
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.tdsl'
      }
      {
        'applyEndPatternLast': 1
        'begin': '\\$\\w'
        'end': '(?=\\W)'
        'name': 'variable.other.interpolated.tdsl'
        'patterns': [
          {
            'match': '\\w'
            'name': 'variable.other.interpolated.tdsl'
          }
          {
            'match': '\\.'
            'name': 'keyword.other.dereference.tdsl'
          }
        ]
      }
      {
        'begin': '\\$\\{'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.tdsl'
        'end': '\\}'
        'name': 'source.tdsl.embedded.source'
        'patterns': [
          {
            'include': '#nest_curly'
          }
        ]
      }
    ]
  'string-quoted-single':
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.tdsl'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.tdsl'
    'name': 'string.quoted.single.tdsl'
    'patterns': [
      {
        'include': '#string-quoted-single-contents'
      }
    ]
  'string-quoted-single-contents':
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.tdsl'
      }
    ]
  expression:
    patterns: [
      {
        match: '(.*)\\s+([\+\-\/\*])\\s+(.*)'
        captures:
          1:
            patterns: [
              {
                include: "#expression"
              }
              {
                include: "#env-function"
              }
              {
                include: "#prop-function"
              }
              {
                include: "#string-quoted-single"
              }
              {
                include: "#string-quoted-double"
              }
              {
                include: "#numbers"
              }
            ]
          2:
            name: 'keyword.operator.any'
          3:
            patterns: [
              {
                include: "#expression"
              }
              {
                include: "#env-function"
              }
              {
                include: "#prop-function"
              }
              {
                include: "#string-quoted-single"
              }
              {
                include: "#string-quoted-double"
              }
              {
                include: "#numbers"
              }
            ]
      }
    ]
  numbers:
    patterns: [
      match: '([0-9]+[lLfFdD]?)'
      name: 'constant.numeric.decimal.tdsl'
      # {
      #   'match': '''(?x)
      #     \\b(?<!\\$)
      #     0(x|X)
      #     (
      #       (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)
      #       |
      #       (
      #         [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?
      #         |
      #         ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?
      #       )
      #       [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?
      #     )
      #     \\b(?!\\$)
      #   '''
      #   'name': 'constant.numeric.hex.java'
      # }
      # {
      #   'match': '\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)'
      #   'name': 'constant.numeric.binary.java'
      # }
      # {
      #   'match': '\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)'
      #   'name': 'constant.numeric.octal.java'
      # }
      # {
      #   'match': '''(?x)
      #     (?<!\\$)
      #     (
      #       \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)
      #       |
      #       \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
      #       |
      #       \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
      #       |
      #       \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
      #       |
      #       (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
      #       |
      #       \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
      #       |
      #       \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
      #       |
      #       \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b
      #     )
      #     (?!\\$)
      #   '''
      #   'name': 'constant.numeric.decimal.java'
      # }
    ]
  'escaped-string':
    match: '\\\\"'
    name: 'constant.character.escape.tdsl.properties'
  'env-function':
    match: 'env\\((\'\\w+\')(,\\s*(\'.*\'))?\\)'
    name: 'constant.other.key.tdsl'
    captures:
      1:
        name: 'constant.language.tdsl'
      3:
        name: 'constant.language.tdsl'
  'prop-function':
    match: 'prop\\((\'\\w+\')(,\\s*(\'.*\'))?\\)'
    name: 'constant.other.key.tdsl'
    captures:
      1:
        name: 'constant.language.tdsl'
      3:
        name: 'constant.language.tdsl'
